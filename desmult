from multiprocessing import Pool
import time
# random, sys
import os


class DesMultiThreading:
    def __init__(self):
        self.password = None
        self.text = None
        self.keys = list()

    def run(self, key, text, action=1, padding=False):
        start = time.time()
        #pid = os.fork()
        f = open("results.txt", "w+")
        f.write('Parallel time result: %f sec' % start)
        #f.write('Parallel mergesort: %f sec' % pid)
        f.close()
        return start

    def encrypt(self, key, text, padding=False):
        return self.run(key, text, 1, padding)


# Execute the main method now that all the dependencies have been defined.
# The if __name is so that pydoc works and we can still run on the command line.
if __name__ == '__main__':
    key = "secret_k"
    text = "Hello wo"
    d = DesMultiThreading()
    r = d.encrypt(key, text)
    #r = d.encrypt(key, text)
    #r2 = d.decrypt(key, r)
    #print("Ciphered: %r" % r)
    #print("Deciphered: ", r2)
    print('Parallel mergesort: %f sec' % r)

